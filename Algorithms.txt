# Busca binária

// recursivo:

BUSCA-BINÁRIA (V[], início, fim, e)
    i recebe o índice do meio entre início e fim
    se (v[i] = e) entao
        devolva o índice i   # elemento e encontrado
    fimse
    se (inicio = fim) entao
        não encontrou o elemento procurado
    senão
       se (V[i] vem antes de e) então
          faça a BUSCA-BINÁRIA(V, i+1, fim, e)
       senão
          faça a BUSCA-BINÁRIA(V, inicio, i-1, e)
       fimse
    fimse

// iterativo;
function binary_search(A, n, T):
    L := 0
    R := n − 1
    while L <= R:
        m := meio((L + R) / 2)
        if A[m] < T:
            L := m + 1
        else if A[m] > T:
            R := m - 1
        else:
            return m
    return unsuccessful

***

//Implementação Iterativa:

PesquisaBinaria ( vet[],  chave,  Tam)
{
     inf := 0;     // limite inferior (o primeiro índice de vetor em C é zero          )
     sup := Tam-1; // limite superior (termina em um número a menos. 0 a 9 são 10 números)
     meio;
     while (inf <:= sup)
     {
          meio := (inf + sup)/2;
          if (chave == vet[meio])
               return meio;
          if (chave < vet[meio])
               sup := meio-1;
          else
               inf := meio+1;
     }
     return -1;   // não encontrado
}

//Implementação Recursiva:

// x => chave | v[] => vetor ordenado | e => limite inferior (esquerda) | d => limite superior (direita)
PesquisaBinaria ( x,  v[],  e,  d)
{
 meio := (e + d)/2;
 if (v[meio] == x)
    return meio;
 if (e >:= d)
    return -1; // não encontrado
 else
     if (v[meio] < x)
        return PesquisaBinaria(x, v, meio+1,      d);
     else
        return PesquisaBinaria(x, v,      e, meio-1);
}
------------------------------------------------------------------------------
# Search tree:

Searching for a Specific Key
Assuming the tree is ordered, we can take a key and attempt to locate it within the tree. The following algorithms are generalized for binary search trees, but the same idea can be applied to trees of other formats


Recursive

search-recursive(key, node)
    if node is NULL
        return EMPTY_TREE
    if key < node.key
        return search-recursive(key, node.left)
    else if key > node.key
        return search-recursive(key, node.right)
    else
        return node


Iterative

searchIterative(key, node)
    currentNode := node
    while currentNode is not NULL
        if currentNode.key = key
            return currentNode
        else if currentNode.key > key
            currentNode := currentNode.left
        else
            currentNode := currentNode.right

------------------------------------------------------------------------------
# Searching for Min and Max

In a sorted tree, the minimum is located at the node farthest left, while the maximum is located at the node farthest right.

Minimum

findMinimum(node)
    if node is NULL
        return EMPTY_TREE
    min := node
    while min.left is not NULL
        min := min.left
    return min.key

Maximum

findMaximum(node)
    if node is NULL
        return EMPTY_TREE
    max := node
    while max.right is not NULL
        max := max.right
    return max.key

------------------------------------------------------------------------------
# Depth-first search (DFS)

A recursive implementation of DFS:

1  procedure DFS(G,v):
2      label v as discovered
3      for all edges from v to w in G.adjacentEdges(v) do
4          if vertex w is not labeled as discovered then
5              recursively call DFS(G,w)


A non-recursive implementation of DFS:

1  procedure DFS-iterative(G,v):
2      let S be a stack
3      S.push(v)
4      while S is not empty
5          v = S.pop()
6          if v is not labeled as discovered:
7              label v as discovered
8              for all edges from v to w in G.adjacentEdges(v) do 
9                  S.push(w)

The non-recursive implementation is similar to breadth-first search but differs from it in two ways:

1. it uses a stack instead of a queue, and
2. it delays checking whether a vertex has been discovered until the vertex is popped from the stack rather than making this check before adding the vertex.

------------------------------------------------------------------------------
# Breadth First Search (BFS)

BFS (G, s)                   //Where G is the graph and s is the source node
      let Q be queue.
      Q.enqueue( s ) //Inserting s in queue until all its neighbour vertices are marked.

      mark s as visited.
      while ( Q is not empty)
           //Removing that vertex from queue,whose neighbour will be visited now
           v  =  Q.dequeue( )

          //processing all the neighbours of v  
          for all neighbours w of v in Graph G
               if w is not visited 
                        Q.enqueue( w )             //Stores w in Q to further visit its neighbour
                        mark w as visited.
                        
------------------------------------------------------------------------------
# Hash-Based Search

loadTable(size,C)
	A = new array of given size
	for i := 0 to n-1 do
		h := hash(C[i])
		if(A[h] is empty) then
			A[h] := new Linked Lisk
		add C[i] to A[h]
	return A
end

search(A,t)
	h := hash(t)
	list := A[h]
	if(list is empty) then
		return false
	if(list contains t) then
		return true
	return false
end
------------------------------------------------------------------------------
# Jump Search (Busca em matrizes ordenadas):

/* Salta N passos até encontrar um elemento maior que o procurado, uma vez encontrado, realiza uma busca linear iniciando do ultimo passo(Salto) cujo elemento era menor que o procurado, até encontrar o elemento desejado. */

    // Encontrando o tamanho do bloco a ser saltado;
    int step = raiz_quadrada(n);
 
    // Encontrando o bloco(saltando de bloco em bloco) onde o elemento está presente (se estiver presente);
    int prev = 0;
    while (array[min(step, n)-1] < x)
    {
        prev = step;
        step += raiz_quadrada(n);
        if (prev >= n)
            return -1;
    }
 
    // Fazendo uma busca linear por x em bloco começando com prev;
    while (array[prev] < x)
    {
        prev++;
 
        // Se chegarmos ao próximo bloco ou ao fim do array, o elemento não está presente;
        if (prev == min(step, n))
            return -1;
    }

    // Se o elemento for encontrado;
    if (array[prev] == x)
        return prev;
 
    return -1;
------------------------------------------------------------------------------
# Busca Exponencial (Busca em matrizes ordenadas):
/*
O algoritmo consiste em dois estágios. O primeiro estágio determina um intervalo no qual a chave de pesquisa residiria se estivesse na lista. No segundo estágio, uma pesquisa binária é executada nesse intervalo.
*/

Busca_Exponencial(T array[], int size, T key)
{
    if (size == 0) {
        return NOT_FOUND;
    }
    
/* Em cada etapa, o algoritmo compara o valor da chave de pesquisa com o valor da chave no índice de pesquisa atual. Se o elemento no índice atual for menor que a chave de pesquisa, o algoritmo se repetirá, pulando para o próximo índice de pesquisa, duplicando-o, calculando a próxima potência de 2. */

    int limite = 1;
    while (limite < size && array[limite] < key) {
        limite *= 2;
    }

/* Se o elemento no índice atual for maior que a chave de pesquisa, o algoritmo agora sabe que a chave de pesquisa, se estiver contida na lista, está localizada no intervalo formado pelo índice de pesquisa anterior, e o índice de pesquisa atual. */

    // BUSCA-BINÁRIA;
    return binary_search(array, key, limite/2, min(limite + 1, size));
}
------------------------------------------------------------------------------
# Algoritmo de Dijkstra:

Anotações Algoritmo de Dijkstra;

+ O array de custos é atribuído como infinito para N vertices do grafo, e o array de vertices visitados é atribuído como falso para N vertices do grafo;

+ De todos os vertices relaxados guardados em um array, seleciona o vertice de menor valor (custo);

+ Registra o vertice de menor custo selecionado como visitado, e visita todos os vertices adjacentes a este vertice selecionado;

+ Relaxa todas as arestas onde, o custo de cada aresta somada ao valor do vertice atual for menor, que o valor do vertice adjacente(não-visitado) a esta aresta;

+ Faz o próximo relaxamento para os vertices adjacentes ao vertice de menor custo relaxado que já foi registrado no array de custos;

função Dijkstra(Grafo, origem):

     cria conjunto de vértices Q

     para cada vertice v em Grafo:
         distancia[v] <- INFINITO
         vertice_anterior[v] <- INDEFINIDO
         adicione v em Q

      /* \/ configure-o para zero para o nosso nó inicial e para o infinito para todos os outros nós. Defina o nó inicial como atual. */	
      distancia[origem] <- 0
      
      enquanto Q não vazio:
	  
	  /* \/ Para o nó atual, considere todos os seus vizinhos não-visitados e encontrar o vértice com valor mínimo de distância calculado anteriormente; */
          u <- vertice em Q com distancia[u] minima

	  /* \/ Quando terminarmos de considerar todos os vizinhos não visitados do nó atual, marque o nó atual como visitado e remova-o do conjunto não-visitado. Um nó visitado nunca será verificado novamente. */
          remove u de Q 
          
          para cada vizinho v de u:
	      /* \/ distancia do vertice atual + a distancia do atual com seu vizinho; */	
              alt <- distancia[u] + tamanho(u, v) /* tamanho é a distancia entre os dois nós vizinhos u e v (u-v); */
              if alt < distancia[v]: /* <= faz um comparativo para registrar a menor distancia nas tabelas abaixo (que serão consultadas na proxima interação);*/
                  distancia[v] <- alt 
                  vertice_anterior[v] <- u 

      retorne distancia[], vertice_anterior[]
------------------------------------------------------------------------------
function Dijkstra(Graph, source):
  for each vertex v in Graph:           // Initializations
      dist[v] := infinity               // Unknown distance function from source to v
      previous[v] := undefined          // Previous node in optimal path from source
  dist[source] := 0                     // Distance from source to source
  Q := the set of all nodes in Graph
  // All nodes in the graph are unoptimized - thus are in Q
  while Q is not empty:                 // The main loop
      u := vertex in Q with smallest dist[]
      if dist[u] = infinity:
          break                         // all remaining vertices are inaccessible
      remove u from Q
      for each neighbor v of u:         // where v has not yet been removed from Q.
          alt := dist[u] + dist_between(u, v) 
          if alt < dist[v]:             // Relax (u,v,a)
              dist[v] := alt
              previous[v] := u
  return previous[]
------------------------------------------------------------------------------
# O algoritmo de Kruskal é um algoritmo em teoria dos grafos que busca uma árvore geradora mínima para um grafo;

ALGORITMO-KRUSKAL(G)

    para cada vértice do grafo, criar a Union-Find;
    // Cria-se uma estrutura de dados chamada União-busca (Disjoint-set, Union-Find); O 'MakeSet' faz-se inicializar a estrutura de dados que será utilizada como arvore;
     MAKE-SET(v)

    A <- Union-Find

    classificar(ordenar), ou obter as arestas do grafo em ordem crescente de peso;

    // para cada aresta do grafo em ordem crescente de peso(do menor peso ao maior);
    for each edge (u, v) 

        // O 'FIND-SET' é um metodo ou função da estrutura de dados Union-Find com o objetivo de realizar uma busca para obter o pai daquele nó inserido no indice da arvore;

        // verifica se o pai de um nó, é diferente do pai do outro nó na aresta; Se o pai dos dois nós forem iguais, formariam um ciclo -- o que não pode ocorrer parar encontrar uma arvore geradora mínima;
         if FIND-SET(u) != FIND-SET(v)
                // 'UNION' é um metodo ou função da estrutura de dados Union-Find com o objetivo de fazer uma ligação entre os dois nós na estrutura; Fazendo com que um nó seja pai do outro nó na arvore;
                UNION(u, v)
    return A
------------------------------------------------------------------------------
// pseudocodigo do algoritmo de Prim usando Priority Queue;

Procedure MSTPrim(Graph, source):
    for each u in V
        key[u] := inf
        parent[u] := NULL
    end for
key[source] := 0
Q = Priority_Queue()
Q = V
while Q is not empty
    u -> Q.pop
    for each v adjacent to i
        if v belongs to Q and Edge(u,v) < key[v] // aqui Edge(u, v) representa o custo de edge(u, v);
            parent[v] := u
            key[v] := Edge(u, v)
        end if
    end for
end while
------------------------------------------------------------------------------
# Algoritmo de Bellman-Ford

+ O algoritmo Bellman-Ford simplesmente relaxa todas as arestas e faz isso |V| - 1 vezes, em que |V| é o número de vértices no grafo.

Bellman_Ford(G,pesos,inicial)
    para todo vertice ∈ V
        λ[vertice] ← ∞
        π[vertice] ← nulo

    λ[inicial] ← 0

    para i de 1 até |V| -1
        para toda aresta = (u,v) ∈ A
            se λ[v] > λ[u] + pesos(u,v) # relaxamento
               λ[v] ← λ[u] + pesos(u,v)
               π[v] ← u

G é um grafo no formato G = (V,A), π[v] indica o predecessor de v, λ[v] é o custo de sair da origem e chegar até o vértice v e "inicial" é o vértice inicial. Após o término do algoritmo, para cada v pertencente aos vértices de G, π[v] → y representa uma aresta selecionada para a árvore geradora mínima (se y ≠ nulo) e, pensando em árvore, λ[v] representa a distância da raiz até o vértice v.

---

function BellmanFord(list vertices, list edges, vertex source) is
    ::distance[], predecessor[]

    // This implementation takes in a graph, represented as
    // lists of vertices and edges, and fills two arrays
    // (distance and predecessor) about the shortest path
    // from the source to each vertex

    // Step 1: initialize graph
    for each vertex v in vertices do
        distance[v] := inf             // Initialize the distance to all vertices to infinity
        predecessor[v] := null         // And having a null predecessor
    
    distance[source] := 0              // The distance from the source to itself is, of course, zero

    // Step 2: relax edges repeatedly
    for i from 1 to size(vertices)−1 do //just |V|−1 repetitions; i is never referenced
        for each edge (u, v) with weight w in edges do
            if distance[u] + w < distance[v] then
                distance[v] := distance[u] + w
                predecessor[v] := u

    // Step 3: check for negative-weight cycles
    for each edge (u, v) with weight w in edges do
        if distance[u] + w < distance[v] then
            error "Graph contains a negative-weight cycle"

    return distance[], predecessor[]

------------------------------------------------------------------------------
